(()=>{"use strict";class e{constructor(e=8){this.boardSize=e,this.container=null,this.boardEl=null,this.cells=[],this.cellClickListeners=[],this.cellEnterListeners=[],this.cellLeaveListeners=[],this.newGameListeners=[],this.saveGameListeners=[],this.loadGameListeners=[],this.escListener=null}bindToDOM(e){if(!(e instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=e}drawUi(e){this.checkBinding(),this.container.innerHTML='\n      <div class="controls">\n        <button data-id="action-restart" class="btn">New Game</button>\n        <button data-id="action-save" class="btn">Save Game</button>\n        <button data-id="action-load" class="btn">Load Game</button>\n      </div>\n      <div class="board-container">\n        <div data-id="board" class="board"></div>\n      </div>\n    ',this.newGameEl=this.container.querySelector("[data-id=action-restart]"),this.saveGameEl=this.container.querySelector("[data-id=action-save]"),this.loadGameEl=this.container.querySelector("[data-id=action-load]"),this.newGameEl.addEventListener("click",(e=>this.onNewGameClick(e))),this.saveGameEl.addEventListener("click",(e=>this.onSaveGameClick(e))),this.loadGameEl.addEventListener("click",(e=>this.onLoadGameClick(e))),document.addEventListener("keydown",(e=>this.onEsc(e))),this.boardEl=this.container.querySelector("[data-id=board]"),this.boardEl.setAttribute("style",`grid-template-columns: repeat(${this.boardSize}, 1fr)`),this.boardEl.classList.add(e);for(let e=0;e<this.boardSize**2;e+=1){const i=document.createElement("div");i.classList.add("cell","map-tile","map-tile-"+(t=e,s=this.boardSize,0===t?"top-left":t>0&&t<s-1?"top":t===s-1?"top-right":t===s*s-1?"bottom-right":t>s*(s-1)&&t<s*s-1?"bottom":t%s==s-1?"right":t===s*(s-1)?"bottom-left":t%s==0?"left":"center")),i.addEventListener("mouseenter",(e=>this.onCellEnter(e))),i.addEventListener("mouseleave",(e=>this.onCellLeave(e))),i.addEventListener("click",(e=>this.onCellClick(e))),this.boardEl.appendChild(i)}var t,s;this.cells=Array.from(this.boardEl.children)}redrawPositions(e){for(const e of this.cells)e.innerHTML="";for(const s of e){const e=this.boardEl.children[s.position],i=document.createElement("div");i.classList.add("character",s.character.type);const a=document.createElement("div");a.classList.add("health-level");const r=document.createElement("div");r.classList.add("health-level-indicator","health-level-indicator-"+((t=s.character.health)<15?"critical":t<50?"normal":"high")),r.style.width=`${s.character.health}%`,a.appendChild(r),i.appendChild(a),e.appendChild(i)}var t}addCellEnterListener(e){this.cellEnterListeners.push(e)}addCellLeaveListener(e){this.cellLeaveListeners.push(e)}addCellClickListener(e){this.cellClickListeners.push(e)}addNewGameListener(e){this.newGameListeners.push(e)}addSaveGameListener(e){this.saveGameListeners.push(e)}addLoadGameListener(e){this.loadGameListeners.push(e)}addEscListener(e){this.escListener=e,document.addEventListener("keydown",this.onEsc.bind(this))}onCellEnter(e){e.preventDefault();const t=this.cells.indexOf(e.currentTarget);this.cellEnterListeners.forEach((e=>e.call(null,t)))}onCellLeave(e){e.preventDefault();const t=this.cells.indexOf(e.currentTarget);this.cellLeaveListeners.forEach((e=>e.call(null,t)))}onCellClick(e){const t=this.cells.indexOf(e.currentTarget);this.cellClickListeners.forEach((e=>e.call(null,t)))}onNewGameClick(e){e.preventDefault(),this.newGameListeners.forEach((e=>e.call(null)))}onSaveGameClick(e){e.preventDefault(),this.saveGameListeners.forEach((e=>e.call(null)))}onLoadGameClick(e){e.preventDefault(),this.loadGameListeners.forEach((e=>e.call(null)))}onEsc(e){"Escape"===e.key&&(e.preventDefault(),"function"==typeof this.escListener&&this.escListener())}static showError(e){alert(e)}static showMessage(e){alert(e)}selectCell(e,t="yellow"){this.deselectCell(e),this.cells[e].classList.add("selected",`selected-${t}`)}deselectCell(e){const t=this.cells[e];t.classList.remove(...Array.from(t.classList).filter((e=>e.startsWith("selected"))))}deselectAll(){const{cells:e}=this;e.forEach((t=>this.deselectCell(e.indexOf(t))))}showCellTooltip(e,t){this.cells[t].title=e}hideCellTooltip(e){this.cells[e].title=""}showDamage(e,t){return new Promise((s=>{const i=this.cells[e],a=document.createElement("span");a.textContent=t,a.classList.add("damage"),i.appendChild(a),a.addEventListener("animationend",(()=>{i.removeChild(a),s()}))}))}setCursor(e){this.boardEl.style.cursor=e}checkBinding(){if(null===this.container)throw new Error("GamePlay not bind to DOM")}}const t="prairie",s="desert",i="arctic",a="mountain",r="auto",o="pointer",h="crosshair",l="not-allowed";class n{constructor(){this.currentStep="player"}static from(e){return e&&"object"==typeof e&&!Array.isArray(e)?{level:e.level,positions:e.positionsToDraw,theme:e.theme,score:e.score}:null}}class c{constructor(){this.characters=new Set}add(e){if(!e)throw new Error("Character cannot be null or undefined");if(this.characters.has(e))throw new Error("Character already exists");this.characters.add(e)}addAll(...e){if(0===e.length)throw new Error("No characters provided");e.forEach((e=>{try{this.add(e)}catch(e){if("Character already exists"!==e.message)throw e}}))}toArray(){this.characters=Array.from(this.characters)}}function d(e,t,s){if(!e||0===e.length)throw new Error("Allowed types array cannot be empty");if(s<=0)throw new Error("Character count must be positive");const i=function*(e,t){for(;;){const s=Math.floor(Math.random()*e.length),i=Math.floor(Math.random()*t)+1;yield{character:new e[s](i),level:i}}}(e,t),a=new c;for(let e=0;e<s;e+=1){const e=i.next().value;a.add(e.character)}return a.toArray(),a.characters}class m{constructor(e,t="generic"){if(this.level=e,this.attack=0,this.defence=0,this.health=50,this.type=t,this.distance=1,this.distanceAttack=1,"Character"===new.target.name)throw new Error("Данный класс нельзя использовать для создания персонажа")}}class y{constructor(e,t,s){if(!(e instanceof m))throw new Error("character must be instance of Character or its children");const i=parseInt(s,10);if(Number.isNaN(i))throw new Error("position must be a valid number");if(i<0)throw new Error("position must be a non-negative number");this.character=e,this.side=t,this.position=i}}class u extends m{constructor(e,t="bowman"){super(e,t),this.attack=25,this.defence=25,this.distance=2,this.distanceAttack=2}}class g extends m{constructor(e=1,t="swordsman"){super(e,t),this.attack=40,this.defence=10,this.distance=4,this.distanceAttack=1}}class p extends m{constructor(e=1,t="magician"){super(e,t),this.attack=10,this.defence=40,this.distance=1,this.distanceAttack=4}}class w extends m{constructor(e=1,t="vampire"){super(e,t),this.attack=25,this.defence=25,this.distance=2,this.distanceAttack=2}}class f extends m{constructor(e=1,t="undead"){super(e,t),this.attack=40,this.defence=10,this.distance=4,this.distanceAttack=1}}class v extends m{constructor(e=1,t="daemon"){super(e,t),this.attack=10,this.defence=10,this.distance=1,this.distanceAttack=4}}const P=new e;P.bindToDOM(document.querySelector("#game-container"));const b=new class{constructor(e){this.storage=e}save(e){this.storage.setItem("state",JSON.stringify(e))}load(){const e=this.storage.getItem("state");if(!e)throw new Error("Invalid state");try{return JSON.parse(e)}catch{throw new Error("Invalid state")}}}(localStorage),E=new class{constructor(e,t){if(!e)throw new Error("gamePlay instance is required");this.gamePlay=e,this.stateService=t,this.sides={player:{name:"player",first:0,second:1,characters:[g,u,p]},enemy:{name:"enemy",first:this.gamePlay.boardSize-1,second:this.gamePlay.boardSize-2,characters:[f,w,v]}},this.level=1,this.score=0,this.attack=[],this.statuses={freespace:"free space",enemy:"enemy",allied:"allied",notallowed:"notallowed"},this.movements=[],this.selected=null,this.currentStatus=null,this.positionsToDraw=[],this.isActionInProgress=!1,this.area=this.getRowArray()}init(){document.addEventListener("DOMContentLoaded",(()=>{const e=JSON.parse(sessionStorage.getItem("reload"));e?this.loadState(e):(this.theme=t,this.gamePlay.drawUi(this.theme))})),this.mouseEvents(),window.addEventListener("unload",(()=>{sessionStorage.setItem("reload",JSON.stringify(n.from(this)))}))}mouseEvents(){this.gamePlay.addCellClickListener(this.onCellClick.bind(this)),this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this)),this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this)),this.gamePlay.addEscListener(this.onEsc.bind(this)),this.gamePlay.addNewGameListener(this.newGame.bind(this,this.level,this.theme)),this.gamePlay.addSaveGameListener(this.saveGame.bind(this)),this.gamePlay.addLoadGameListener(this.loadGame.bind(this))}positions(){const e=[];for(let t=0;t<this.gamePlay.boardSize**2;t+=1)e.push(t);return{array:e,row:this.gamePlay.boardSize,length:e.length}}sidePositions(e){const t=this.positions();return t.array.filter((s=>s%t.row===e.first||s%t.row===e.second)).map((e=>e))}getPosition(e){if(!Array.isArray(e)||0===e.length)throw new Error("side must be a non-empty array");const t=Math.floor(Math.random()*e.length),s=e[t];if("number"!=typeof s)throw new Error("Invalid cell position");return e.splice(t,1),s}newGame(e=1,s=t){this.level=e,this.gamePlay.deselectAll(),this.selected=null,this.theme=s,this.gamePlay.drawUi(this.theme),1===e&&(this.positionsToDraw=[]);const i=Array.from(this.sidePositions(this.sides.player)),a=Array.from(this.sidePositions(this.sides.enemy));if(this.positionsToDraw.length){this.positionsToDraw.forEach((e=>{e.position=this.getPosition(i)}));const t=Array.from(this.sidePositions(this.sides.player)).filter((e=>!this.positionsToDraw.find((t=>t.position===e)))),s=this.positionsToDraw.length;let r;2===e&&(r=d(this.sides.player.characters,e-1,1)),3!==e&&4!==e||(r=d(this.sides.player.characters,e-1,2));const o=d(this.sides.enemy.characters,e,r.length+s);this.positionsToDraw.push(r.map((e=>new y(e,this.sides.player.name,this.getPosition(t))))),this.positionsToDraw.push(o.map((e=>new y(e,this.sides.enemy.name,this.getPosition(a))))),this.positionsToDraw=this.positionsToDraw.flat()}else{const t=d([g,u],e,2),s=d(this.sides.enemy.characters,e,2);this.positionsToDraw=[...t.map((e=>new y(e,this.sides.player.name,this.getPosition(i)))),...s.map((e=>new y(e,this.sides.enemy.name,this.getPosition(a))))].flat()}this.gamePlay.redrawPositions(this.positionsToDraw)}saveGame(){if(this.positionsToDraw.length){const t=n.from(this);this.stateService.save(t),e.showMessage("Game saved")}else e.showError("No saved games")}loadGame(){const t=this.stateService.load();t?(this.loadState(t),e.showMessage("Game loaded")):e.showError("No saved games")}loadState(e){if(!e)return;this.gamePlay.deselectAll(),this.selected=null;const{level:s,positions:i,theme:a,score:r}=e;this.level=s||1,this.positionsToDraw=i,this.theme=a||t,this.score=r||0,this.gamePlay.drawUi(this.theme),Array.isArray(this.positionsToDraw)&&this.positionsToDraw.length>0&&this.gamePlay.redrawPositions(this.positionsToDraw)}onEsc(){this.clear(),this.score=0,this.gamePlay.drawUi(this.theme)}clear(){this.level=1,this.positionsToDraw=[],this.selected=null,this.theme=t}levelUp(){switch(this.level+=1,this.positionsToDraw.forEach((e=>{e.character.level=this.level,e.character.attack=Math.ceil(Math.max(e.character.attack,e.character.attack*(1.8-(1===e.character.health?80:e.character.health)/100))),e.character.defence=Math.ceil(Math.max(e.character.defence,e.character.defence*(1.8-(1===e.character.health?80:e.character.health)/100))),e.character.health=Math.ceil(e.character.health+80>100?100:e.character.health+80)})),this.level){case 2:this.gamePlay.drawUi(s),this.theme=s;break;case 3:this.gamePlay.drawUi(i),this.theme=i;break;case 4:this.gamePlay.drawUi(a),this.theme=a;break;default:this.gamePlay.drawUi(t),this.theme=t}return this.level}getRowArray(){const e=[];let t=[];for(let s=0;s<this.gamePlay.boardSize**2;s+=1)t.push(s),t.length===this.gamePlay.boardSize&&(e.push(t),t=[]);return e}getAreaMove(e,t){if(!e||void 0===t)return[];const s=this.gamePlay.boardSize,i=e.position%s,a=Math.floor(e.position/s),r=[],o=Number(t)||1;for(let e=1;e<=o;e+=1){let t=i+e;t<s&&this.area[a]&&r.push(this.area[a][t]);let o=a+e;o<s&&this.area[o]&&r.push(this.area[o][i]),o<s&&t<s&&this.area[o]&&r.push(this.area[o][t]),t=i-e,t>=0&&this.area[a]&&r.push(this.area[a][t]),t>=0&&o<s&&this.area[o]&&r.push(this.area[o][t]),o=a-e,o>=0&&this.area[o]&&r.push(this.area[o][i]),o>=0&&t>=0&&this.area[o]&&r.push(this.area[o][t]),t=i+e,t<s&&o>=0&&this.area[o]&&r.push(this.area[o][t])}return r.filter((e=>void 0!==e&&e>=0))}getAreaAttack(e,t){const s=[];for(let i=e.position-this.gamePlay.boardSize*t;i<=e.position+this.gamePlay.boardSize*t;i+=this.gamePlay.boardSize)if(i>=0&&i<this.gamePlay.boardSize**2)for(let e=i-t;e<=i+t;e+=1)e>=i-i%this.gamePlay.boardSize&&e<i+(this.gamePlay.boardSize-i%this.gamePlay.boardSize)&&s.push(e);return s.splice(s.indexOf(e.position),1),s}moveDefending(e,t,s){const i=this.getAreaMove(e,e.character.distance).filter((e=>-1===this.positionsToDraw.findIndex((t=>t.position===e)))),a=e=>({x:e.position%this.gamePlay.boardSize,y:Math.floor(e.position/this.gamePlay.boardSize)}),r=a(e),o=a(t),h=(()=>o.x<=r.x?o.y<=r.y?i.filter((e=>e%this.gamePlay.boardSize>=o.x&&e%this.gamePlay.boardSize<=r.x&&Math.floor(e/this.gamePlay.boardSize)<=r.y&&Math.floor(e/this.gamePlay.boardSize)>=o.y)):i.filter((e=>e%this.gamePlay.boardSize>=o.x&&e%this.gamePlay.BoardSize<=r.x&&Math.floor(e/this.gamePlay.boardSize)>r.y&&Math.floor(e/this.gamePlay.boardSize)<=o.y)):o.y<=r.y?i.filter((e=>e%this.gamePlay.boardSize<=o.x&&e%this.gamePlay.boardSize>r.x&&Math.floor(e/this.gamePlay.boardSize)<=r.y&&Math.floor(e/this.gamePlay.boardSize)>=o.y)):i.filter((e=>e%this.gamePlay.boardSize<=o.x&&e%this.gamePlay.boardSize>r.x&&Math.floor(e/this.gamePlay.boardSize)>r.y&&Math.floor(e/this.gamePlay.boardSize)<=o.y)))();if(!h.length){if(!i.length){const t=[...s];t.splice(s.indexOf(e),1),e=t[Math.floor(Math.random()*t.length)]}const t=this.getAreaMove(e,e.character.distance).filter((e=>-1===this.positionsToDraw.findIndex((t=>t.position===e))));return t[Math.floor(Math.random()*t.length)]}return h[Math.floor(Math.random()*h.length)]}calculateDamage(e,t){return Math.max(e.character.attack-t.character.defence,Math.ceil(.1*e.character.attack))}moveEnemyAttack(){this.isActionInProgress=!0,this.gamePlay.deselectAll();const e=this.positionsToDraw.filter((e=>e.side===this.sides.enemy.name)),t=e.find((t=>t.character.attack===Math.max.apply(null,e.map((e=>e.character.attack)))));return new Promise(((s,i)=>{const a=this.calculateDamage(t,this.selected);this.getAreaAttack(t,t.character.distanceAttack).includes(this.selected.position)?(this.selected.character.health=Math.max(0,this.selected.character.health-a),s(a)):i({enemyAttacker:t,enemies:e})}))}onCellClick(t){if(this.isActionInProgress)return;if(t<0||t>=this.gamePlay.boardSize**2)return;const s=()=>{if(this.isActionInProgress=!1,this.selected&&this.selected.character.health<=0&&(this.positionsToDraw=this.positionsToDraw.filter((e=>e!==this.selected)),this.selected=null),this.gamePlay.redrawPositions(this.positionsToDraw),!this.positionsToDraw.some((e=>e.side===this.sides.player.name)))return e.showMessage("Игра окончена!"),this.clear(),this.score=0,void this.gamePlay.drawUi(this.theme);this.selected&&(this.gamePlay.selectCell(this.selected.position,"yellow"),this.movements=this.getAreaMove(this.selected,this.selected.character.distance),this.attacks=this.getAreaAttack(this.selected,this.selected.character.distanceAttack))},i=this.positionsToDraw.find((e=>e.position===t));if(null!==this.selected){if(this.currentStatus!==this.statuses.freespace||i){if(i&&i.side===this.sides.player.name)return this.gamePlay.deselectCell(this.selected.position),this.selected=i,this.gamePlay.selectCell(t,"yellow"),this.movements=this.getAreaMove(this.selected,this.selected.character.distance),void(this.attacks=this.getAreaAttack(this.selected,this.selected.character.distanceAttack));if(this.currentStatus===this.statuses.enemy&&this.attacks.includes(t)&&i?.side===this.sides.enemy.name){this.isActionInProgress=!0;const a=this.calculateDamage(this.selected,i);i.character.health=Math.max(0,i.character.health-a);const r=i.character.health<=0;this.gamePlay.showDamage(t,a).then((()=>r&&(this.positionsToDraw=this.positionsToDraw.filter((e=>e!==i)),this.gamePlay.redrawPositions(this.positionsToDraw),!this.positionsToDraw.some((e=>e.side===this.sides.enemy.name)))?(this.score+=this.positionsToDraw.reduce(((e,t)=>e+t.character.health),0),4===this.level?(e.showMessage(`Победа! Ваш счет равен ${this.score}.`),this.clear(),this.gamePlay.drawUi(this.theme),Promise.resolve()):(e.showMessage(`Победа! Переход на уровень ${this.level+1}! Ваш счет равен ${this.score}.`),this.newGame(this.levelUp(),this.theme),Promise.resolve())):this.moveEnemyAttack())).then((e=>{if(e&&this.selected)return this.selected.character.health=Math.max(0,this.selected.character.health-e),this.gamePlay.showDamage(this.selected.position,e)}),(({enemyAttacker:e,enemies:t})=>{e&&t.length>0&&(e.position=this.moveDefending(e,this.selected,t),this.gamePlay.redrawPositions(this.positionsToDraw))})).then(s)}else e.showError("Недопустимое действие!")}else if(this.movements.includes(t)){const e=this.selected.position;this.selected.position=t,this.gamePlay.deselectCell(e),this.gamePlay.selectCell(t,"yellow"),this.gamePlay.redrawPositions(this.positionsToDraw),this.moveEnemyAttack().then((e=>e?this.gamePlay.showDamage(this.selected.position,e).then((()=>(this.gamePlay.selectCell(this.selected.position,"yellow"),s()))):s()),(({enemyAttacker:e,enemies:t})=>(e&&t.length>0&&(e.position=this.moveDefending(e,this.selected,t),this.gamePlay.redrawPositions(this.positionsToDraw),this.gamePlay.selectCell(this.selected.position,"yellow")),s()))).catch((e=>{console.error("Error during enemy move:",e),this.gamePlay.redrawPositions(this.positionsToDraw)}))}}else{if(!i)return;i.side===this.sides.player.name?(this.selected=i,this.gamePlay.selectCell(t,"yellow"),this.movements=this.getAreaMove(this.selected,this.selected.character.distance),this.attacks=this.getAreaAttack(this.selected,this.selected.character.distanceAttack)):e.showError("Это персонаж противника!")}}onCellEnter(e){if(e||0===e){if(Array.isArray(this.positionsToDraw)){const t=this.positionsToDraw.find((t=>t.position===e));t&&this.gamePlay.showCellTooltip(function({level:e,attack:t,defence:s,health:i}){return`🎖${e} ⚔${t} 🛡${s} ❤${i}`}(t.character),e)}if(this.selected){const t={distance:this.selected.character.distance,distanceAttack:this.selected.character.distanceAttack};this.movements=this.getAreaMove(this.selected,t.distance),this.attacks=this.getAreaAttack(this.selected,t.distanceAttack);const s=this.positionsToDraw.find((t=>t.position===e));this.attacks.includes(e)&&s&&s.side===this.sides.enemy.name?(this.gamePlay.selectCell(e,"red"),this.gamePlay.setCursor(h),this.currentStatus=this.statuses.enemy):this.movements.includes(e)&&!s?(this.gamePlay.selectCell(e,"green"),this.gamePlay.setCursor(o),this.currentStatus=this.statuses.freespace):s&&s.side===this.sides.player.name?(this.gamePlay.setCursor(o),this.currentStatus=this.statuses.allied):(this.gamePlay.setCursor(l),this.currentStatus=this.statuses.notallowed)}}}onCellLeave(e){this.gamePlay.hideCellTooltip(e),this.selected&&e!==this.selected.position&&this.gamePlay.deselectCell(e),this.gamePlay.setCursor(r)}}(P,b);E.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,