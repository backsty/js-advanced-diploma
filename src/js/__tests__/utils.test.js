import { calcTileType, calcHealthLevel, formatCharacterInfo } from '../utils.js';
import { describe, test, expect } from '@jest/globals';

/* 
(*) –ü–ª–∞–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:

+–¢–µ—Å—Ç—ã –¥–ª—è calcTileType:
  - –í—Å–µ —É–≥–ª–æ–≤—ã–µ —Å–ª—É—á–∞–∏
  - –í—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã
  - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
  - –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è

+–¢–µ—Å—Ç—ã –¥–ª—è calcHealthLevel:
  - –í—Å–µ —É—Ä–æ–≤–Ω–∏ –∑–¥–æ—Ä–æ–≤—å—è
  - –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  
+–¢–µ—Å—Ç—ã –¥–ª—è formatCharacterInfo:
  - –†–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 
*/

describe('calcTileType', () => {
  const boardSize = 8;

  // –£–≥–ª–æ–≤—ã–µ –∫–ª–µ—Ç–∫–∏
  test('should return correct corner types', () => {
    expect(calcTileType(0, boardSize)).toBe('top-left');
    expect(calcTileType(boardSize - 1, boardSize)).toBe('top-right');
    expect(calcTileType(boardSize * (boardSize - 1), boardSize)).toBe('bottom-left');
    expect(calcTileType((boardSize * boardSize) - 1, boardSize)).toBe('bottom-right');
  });

  // –í–µ—Ä—Ö–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞
  test('should return top for top edge', () => {
    for (let i = 1; i < boardSize - 1; i++) {
      expect(calcTileType(i, boardSize)).toBe('top');
    }
  });

  // –ù–∏–∂–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞
  test('should return bottom for bottom edge', () => {
    for (let i = boardSize * (boardSize - 1) + 1; i < boardSize * boardSize - 1; i++) {
      expect(calcTileType(i, boardSize)).toBe('bottom');
    }
  });

  // –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
  test('should return left for left edge', () => {
    for (let i = boardSize; i < boardSize * (boardSize - 1); i += boardSize) {
      expect(calcTileType(i, boardSize)).toBe('left');
    }
  });

  // –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
  test('should return left for left edge', () => {
    for (let i = boardSize * 2 - 1; i < boardSize * (boardSize - 1); i += boardSize) {
      expect(calcTileType(i, boardSize)).toBe('right');
    }
  });

  // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
  test('should return center for center cells', () => {
    const centerIndexes = [9, 10, 17, 18, 25, 26, 33, 34, 41,42, 49, 50];
    centerIndexes.forEach((index) => {
      expect(calcTileType(index, boardSize)).toBe('center');
    });
  });
});

describe('calcHealthLevel', () => {
  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–¥–æ—Ä–æ–≤—å—è
  test('should return critical for hralth < 15', () => {
    expect(calcHealthLevel(0)).toBe('critical');
    expect(calcHealthLevel(14)).toBe('critical');
    expect(calcHealthLevel(14.9)).toBe('critical');
  });

  // –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–¥–æ—Ä–æ–≤—å—è
  test('should return normal for 15 <= health <= 50', () => {
    expect(calcHealthLevel(15)).toBe('normal');
    expect(calcHealthLevel(30)).toBe('normal');
    expect(calcHealthLevel(49)).toBe('normal');
    expect(calcHealthLevel(49.9)).toBe('normal');
  });

  // –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–¥–æ—Ä–æ–≤—å—è
  test('should return high for health >= 50', () => {
    expect(calcHealthLevel(50)).toBe('high');
    expect(calcHealthLevel(75)).toBe('high');
    expect(calcHealthLevel(100)).toBe('high');
  });
});

describe('formatCharacterInfo', () => {
  test('should format basic character info', () => {
    const character = {
      level: 1,
      attack: 25,
      defence: 25,
      health: 100,
    };
    expect(formatCharacterInfo(character)).toBe('üéñ1 ‚öî25 üõ°25 ‚ù§100');
  });

  test('should format different character info', () => {
    const testCases = [
      {
        input: { level: 2, attack: 40, defence: 10, health: 50 },
        expected: 'üéñ2 ‚öî40 üõ°10 ‚ù§50'
      },
      {
        input: { level: 4, attack: 10, defence: 40, health: 1 },
        expected: 'üéñ4 ‚öî10 üõ°40 ‚ù§1'
      }
    ];
    
    testCases.forEach(({ input, expected }) => {
      expect(formatCharacterInfo(input)).toBe(expected);
    });
  });
});